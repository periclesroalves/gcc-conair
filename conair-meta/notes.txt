---------
- General
---------

- TODO: GCC is recognizing the setjmp/longjmps we insert as a loop. Change the
  SSA fixup pass to avois this.
- TODO: verify if the variables in setjmp/longjmp regions need to be marked
  volatile (see gcc mail list).)
- TODO: during backwards DFS, when testing if we reached the entry block, test
  against ENTRY_BLOCK_PTR_FOR_FN rather than the block index=0 (new blocks can
  have index=0).
- TODO: update loop and dominanace info for blocks created in
  insert_deref_assert (even with split block and split_edge) (see tree-complex.c
  1152 for example).
- TODO: Document pass in trunk/gcc/doc/invoke.texi
- TODO: Remember to verify todos for after pass (e.g., clean_ssa, which requires
  marking new names to be done).
- TODO: in the future we will have to update the profile info for every new
  edges and blocks we create. I still don't know how this relates to
  performance.

!!! A reexecution region is useless if it doesn't encompass global
readings/loads.

- I coudn't find a way to verify if a function comes from a library, so I wasn't
  able to verify if the user may have overwritten functions like __assert_rtn
  and pthreads_lock.
   . Since this coudn't be verified, newly inserted assertion failure block will
   have the original dereference block as a successor, as the user may redefine
   __assert_rtn or __assert_fail not to exit.
  TODO: currently we implement assertion failures as calls to __builtin_trap.
  However, the original assert() does nothing when NDEBUG is defined, and so
  should our implementaation.

- I assume that every pointer dereference is represented as the rhs or lhs of a
  single rhs assignment. In other stages of the CFG this may not be true. Other
  than that, the dereferenced address must be hold by an SSA name, so that we
  can safely test it before the actual dereference (no side effect garanteed).
  NOTE: arrays declared locally with fixed size are handled with special
    indexing read and write instructions. Currently this instructions are not
    being considered for pointer dereference instrumentation. We must also
    handle this in a different way when looking for idempotent regions.
  TODO: In addition, we must consider builtin functions that may dereference an
    argument: maybe handle them by hand.
  TODO: right now we only test for NULL pointers. In the future, we could try to
  see if the pointer is within the program segment, so we can catch bugs like
  dereferencing unitialized pointers, which are not null, but hold an illegal
  adress.

- TODO: improve graph-check to verify the existence of assertion failure calls
  (maybe create one version of pointer testing for output testing and another
  for segfault avoidance testing).


--------------------
- Idempotent regions
--------------------

GCC has two types of SSA operands: real and virtual. Real operands are scalar
local variables with location known at all times and virtual operands are
references to globals, aliased variables, arrays, etc. To what I understand,
when looking for idempotent regions, we must consider the following:
  - Write to virtual operands (virtual definitions/stores) are
    idempotent-destroying instructions, mainly because they may change data
    exposed to another threads.
  - Assignments to real operands:
    . SSA guarantees no static write after read, however copy insertion for
    phi elimination will eventually insert problematic variable reassignments
    in loops.
    . Variables are not guaranteed to be in registers all times, therefore the
    compiler must not reuse the same stack slot for two variables (probably
    disable the stack coloring pass) (-fno-ira-share-spill-slots).
    TODO: try to disable stack coloring only for variables in idempotent
    regions.
    . Register restoring solves the problem of potential assignment of two
    different variables to the same register.
    . Dynamic rewrites - possible algorithm:
      . When visiting a phi in a loop head, if at least one of its operands are
      assigned within the loop, insert a stack checkpoint for every operand
      defined outside the loop.
      !!! Take care so the block is not generated when the loop has no phis.
      !!! This is useless when there are no paths in the loop that do not cross
      a cut.
      !!! Verify if the checkpoint block is not removed by future passes.
      . Every time a cut is inserted in a loop, insert the loop id in cutLoops.
      . At the end of the analysis, insert cuts after reads that appear inside
      the loop for every variable defined by phis in the header of every loop
      that was cut. (this can generate a big number of useless reexecution
      points. See if we can reduce this number by verifying if loops were cut
      when handling reads inside loops)
        . As we are in a loop, it doesn't matter if the read comes after or
        before the failure point in the body (this can be demonstrated using the
        basic loop counter example).
      !!! Verify if this is actually working.
      !!! Opt: we don't actually need cuts after all reads, but just that every
      read do not reach a failure site without passing through a reexecution
      point.

!!! Idempotency analysis is run for each failure site. Take care so we do not
insert a reexection point in the same place more than once. Maybe we could
maintain a set of already analysed blocks. We would still have the problem of
blocks that were only analysed from somewhere in the middle. Verify how this
behaves when inserting cuts for dynamic variables in loops. Another option would
be simply to analyse everything again, and let the caller handle repeated
identified reexecution points (problably mantaining a set of reexection points
and instrumenting them in a different pass (after analysing and instrumenting
all failure sites)).
!!! it looks like simple induction variables are not in SSA form (probably being
considered stores). Verify that (maybe it's just my example, which captures the
induction var address).
!!! Maybe at the end we can run a static analysis to remove redundant reexecution
points. Every read must pass through a reexecution point before reaching a
failure point (for all paths). Maybe an instance of taint-flow analysis.
Actualy, every setjmp that crosses another setjmp before reaching a longjmp in
all paths is useless.
!!! Try to avoid revisiting the same blocks when analysing different failure
points.
!!! Right now the jump buffer is static global. We need to change it for per
thread buffer, as in the paper. (Actually, while we just perform
inter-procedural optimizations, we can keep the buffer local to the function and
pass its address to the proxy function. This works because we know that the
taken setjmp will be always after the buffer declaration (check this), so when
setjmp restores the registers, the stack is also restored).


--------------
- Set/longjmps
--------------

- TODO: verify if the proxy function is not already declared in the current
  scope.
- TODO: fix the pass dump.
!!! If we insert sjljs, GCC requires an edge from every effectful function call
  to the dispacther block. That may cause a performance problem, by disabling
  some optmizations. Try to see if we really need this even if our code is just
  intra-procedural.
- TODO: Mimic all properties setted in when setjmp/longjmp calls are found. Passes
  that run before ConAir can execute normally, even if they depend on the
  existence of setjmp/longjmps. All we have to guarantee is that future passes
  will be aware of the setjmps we inserted. Be carefull to verify that every pass
  that sets program properties based on the existence of setjmp/longjmps are
  replicated in our code.
- Verify if builtin setjmps can be used interprocedurally without any problem,
  because the labels seem to be local to the function.
- TODO: assert, at the start of the pass, that DONT_USE_BUILTIN_SETJMP is not
  defined.
- We use one counter per function to avoid the overhead of one counter per
  failure site.
- TODO: in the future, implement the reexecution counter as a thread variable,
  not a local function variable (local counter may not work to weel with inter
  procedural analysis). After doing that, revome the test that avoid reexecution
  regions getting passed a counter reset (we also no longer need to save the
  reset_stmt in a global var). We also need to take a look on how to perform SSA
  update for global vars.
- TODO: define the maximu reexecution counter for the function.
- While fixing the SSA net, we currently verify each definition in the graph to
  see if it is problematic. Change this to a more constrained search (only
  blocks that can be reached from an assertion block and can reach a setjmp).
- When an idempotent killing instruction is the last one in a block, we
  insert a setjmp in the beginning of every successor. This may be inserting
  useless setjmps, because not all successors may need a setjmp (just the ones
  that reache a failure point).


---------------------------
Benchmark testing work list
---------------------------

- ZSnes:
  . Loop header checkpoint insertion was disabled because the reassignment was causing an error.
  . Call graph edge frequency error ignored.
  . Incorrect EH edges error ignored.
  . Tail merge optimization was disabled due to an internal assertion failure. 
